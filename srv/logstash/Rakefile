namespace :logstash do
  desc "Run logstash off a redis queue"
  task :redis_to_elasticsearch do
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/redis_to_elasticsearch.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/redis_to_elasticsearch.conf")
      
    sh "/usr/bin/java -Dnetworkaddress.cache.ttl=32 -Djava.io.tmpdir='#{ENV['APP_TMP_DIR']}' -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/redis_to_elasticsearch.conf'"
  end

  desc "Run logstash off stdin"
  task :pv_to_elasticsearch, :logstash_type, :path do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/pv_to_elasticsearch.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/pv_to_elasticsearch.conf", args)
    sh "/usr/bin/pv -ept #{args[:path]} | TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -Dnetworkaddress.cache.ttl=32 -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/pv_to_elasticsearch.conf'"
  end

  desc "Run logstash off a file"
  task :file_to_elasticsearch, :logstash_type, :path do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/file_to_elasticsearch.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/file_to_elasticsearch.conf", args)
    sh "TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -Dnetworkaddress.cache.ttl=32 -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/file_to_elasticsearch.conf'"
  end

  desc "Run logstash off a file and send it to redis"
  task :file_to_redis, :logstash_type, :path do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/file_to_redis.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/file_to_redis.conf", args)
    sh "TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -Dnetworkaddress.cache.ttl=32 -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/file_to_redis.conf'"
  end

  desc "Run logstash off stdin"
  task :pv_to_redis, :logstash_type, :path do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/pv_to_redis.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/pv_to_redis.conf", args)
    sh "/usr/bin/pv -ept #{args[:path]} | TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -Dnetworkaddress.cache.ttl=32 -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/pv_to_redis.conf'"
  end

  desc "Run logstash off json file via stdin"
  task :pv_jsonfile_to_elasticsearch, :logstash_type, :path do |t, args|
    process_erb(
        "#{ENV['APP_APP_DIR']}/srv/logstash/config/pv_to_elasticsearch.conf.erb",
        "#{ENV['APP_APP_DIR']}/srv/logstash/config/pv_to_elasticsearch.conf",
        {
            :logstash_format => "json",
            :logstash_type => args[:logstash_type],
            :path => args[:path]
        }
    )
    sh "/usr/bin/pv -ept #{args[:path]} | TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -Dnetworkaddress.cache.ttl=32 -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/pv_to_elasticsearch.conf'"
  end

  # use only when you want super, super inefficient imports (only used by the tests)
  task :slow, :subcall, :logstash_type, :path do |t, args|
    $bug_679_flush_size = 1
  
    Rake::Task["logstash:#{args[:subcall]}"].invoke(args[:logstash_type], args[:path])
  end

  desc "Parse STDIN and dump the result to STDOUT"
  task :debug, :logstash_type do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/debug.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/debug.conf", args)
    sh "TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -Dnetworkaddress.cache.ttl=32 -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/debug.conf'"
  end

  namespace :test do
    desc "Run all available integration tests"
    task :all_types do
      puts "==> Running logstash tests"

      Rake::Task["logstash:test:common:trimming"].invoke
      Rake::Task["logstash:test:type:nginx_combined"].invoke
      Rake::Task["logstash:test:type:iis_default"].invoke
      Rake::Task["logstash:test:type:iis_tradingapi"].invoke
      Rake::Task["logstash:test:type:stackato_apptail"].invoke
      Rake::Task["logstash:test:type:stackato_event"].invoke
      Rake::Task["logstash:test:type:stackato_systail"].invoke
      Rake::Task["logstash:test:type:ci_appmetrics"].invoke
      Rake::Task["logstash:test:type:ci_log4net"].invoke
      Rake::Task["logstash:test:type:ci_ip_diagnostics"].invoke

      puts "==> All tests completed successfully :)"
    end

    namespace :common do
        task :trimming do
            sh "#{ENV['APP_APP_DIR']}/srv/logstash/test/common-trimming.sh #{$LOGSTASH_MESSAGE_MAXSIZE}"
        end
    end

    namespace :type do
      desc "Run nginx_combined tests"
      task :nginx_combined => :erase do
        run_integration_test("nginx_combined", "pv_to_elasticsearch")
      end

      desc "Run iis_default tests"
      task :iis_default => :erase do
        run_integration_test("iis_default", "pv_to_elasticsearch")
      end

      desc "Run iis_tradingapi tests"
      task :iis_tradingapi => :erase do
        run_integration_test("iis_tradingapi", "pv_to_elasticsearch")
      end

      desc "Run stackato_apptail tests"
      task :stackato_apptail => :erase do
        run_integration_test("stackato_apptail", "pv_jsonfile_to_elasticsearch")
      end

      desc "Run stackato_event tests"
      task :stackato_event => :erase do
        run_integration_test("stackato_event", "pv_jsonfile_to_elasticsearch")
      end

      desc "Run stackato_systail tests"
      task :stackato_systail => :erase do
        run_integration_test("stackato_systail", "pv_jsonfile_to_elasticsearch")
      end

      desc "Run ci_appmetrics tests"
      task :ci_appmetrics => :erase do
        run_integration_test("ci_appmetrics", "pv_to_elasticsearch")
      end

      desc "Run ci_log4net tests"
      task :ci_log4net => :erase do
        run_integration_test("ci_log4net", "pv_to_elasticsearch")
      end

      desc "Run ci_ip_diagnostics tests"
      task :ci_ip_diagnostics => :erase do
        run_integration_test("ci_ip_diagnostics", "pv_to_elasticsearch")
      end
    end
  end
end

class ElasticsearchNotRunning < RuntimeError; end

def run_integration_test(type, task = "file")
    pid = fork do
        exec "rake elasticsearch:run > /dev/null 2>&1"
    end

    # dependencies would have marked these to not run again, so reset that
    Rake::Task['erase'].reenable

    begin
        puts "==> Waiting for elasticsearch to be ready ..."
        sh "while ! nc -vz #{ENV['APP_CONFIG_ES_IPADDRESS']} 9200 2>/dev/null ; do sleep 2 ; done"

        puts "==> Importing test data ..."
        sh "ruby #{ENV['APP_APP_DIR']}/srv/logstash/test/do-import.rb #{task} #{type} #{ENV['APP_APP_DIR']}/srv/logstash/test/#{type}.log > /dev/null"

        puts "==> Ensuring elasticsearch has finished indexing our data ..."
        sh "curl -sXPOST 'http://#{ENV['APP_CONFIG_ES_IPADDRESS']}:9200/_all/_refresh' > /dev/null"
      
        puts "==> Running our test queries ..."
        sh "ruby #{ENV['APP_APP_DIR']}/srv/logstash/test/#{type}.rb"
    ensure
        Process.kill("TERM", File.read("#{ENV['APP_RUN_DIR']}/elasticsearch.pid").to_i)
        Process.waitpid(pid)
    end
end
