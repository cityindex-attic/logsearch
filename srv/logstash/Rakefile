require_relative 'test/common'

$LOGSTASH_WORKERS = ENV['APP_LOGSTASH_WORKERS'] || `grep -c ^processor /proc/cpuinfo`.chomp

namespace :logstash do
  desc "Run logstash off a redis queue"
  task :redis_to_elasticsearch do
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/redis_to_elasticsearch.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/redis_to_elasticsearch.conf")
      
    sh "/usr/bin/java -Djava.io.tmpdir='#{ENV['APP_TMP_DIR']}' -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/redis_to_elasticsearch.conf'"
  end

  desc "Load a file with logstash and send to ElasticSearch"
  task :load_file_to_elasticsearch, :logstash_type, :path do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/load_file_to_elasticsearch.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/load_file_to_elasticsearch.conf", args)
    sh "/usr/bin/pv -ept #{args[:path]} | TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/load_file_to_elasticsearch.conf'"
  end

  desc "Watch changes to a file with logstash off a file and send it to ElasticSearch"
  task :watch_file_to_elasticsearch, :logstash_type, :path do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/watch_file_to_elasticsearch.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/watch_file_to_elasticsearch.conf", args)
    sh "TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/watch_file_to_elasticsearch.conf'"
  end

  desc "Watch changes to a file with logstash off a file and send it to Redis"
  task :watch_file_to_redis, :logstash_type, :path do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/watch_file_to_redis.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/watch_file_to_redis.conf", args)
    sh "TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/watch_file_to_redis.conf'"
  end

  desc "Load a file with logstash and send to redis"
  task :load_file_to_redis, :logstash_type, :path do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/load_file_to_redis.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/load_file_to_redis.conf", args)
    sh "/usr/bin/pv -ept #{args[:path]} | TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/load_file_to_redis.conf'"
  end

  desc "Run logstash forwarding lumberjack messages to redis"
  task :lumberjack_to_redis, :logstash_type, :path do |t, args|
    if ! File.exists?("#{ENV['APP_DATA_DIR']}/lumberjack.key")
      puts "ERROR: #{ENV['APP_DATA_DIR']}/lumberjack.key is missing"
      exit 1
    end

    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/lumberjack_to_redis.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/lumberjack_to_redis.conf", args)
    sh "TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/lumberjack_to_redis.conf'"
  end

  desc "Run logstash forwarding syslog messages to redis"
  task :syslog_to_redis, :logstash_type, :path do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/syslog_to_redis.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/syslog_to_redis.conf", args)
    sh "TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/syslog_to_redis.conf'"
  end

  desc "Load a file with logstash with logstash_format => json and send to elasticsearch"
  task :load_file_jsonfile_to_elasticsearch, :logstash_type, :path do |t, args|
    process_erb(
      "#{ENV['APP_APP_DIR']}/srv/logstash/config/load_file_to_elasticsearch.conf.erb",
      "#{ENV['APP_APP_DIR']}/srv/logstash/config/load_file_to_elasticsearch.conf",
      {
        :logstash_format => "json",
        :logstash_type => args[:logstash_type],
        :path => args[:path]
      }
    )
    sh "/usr/bin/pv -ept #{args[:path]} | TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/load_file_to_elasticsearch.conf'"
  end

  # use only when you want super, super inefficient imports (only used by the tests)
  task :slow, :subcall, :logstash_type, :path do |t, args|
    $bug_679_flush_size = 1
  
    Rake::Task["logstash:#{args[:subcall]}"].invoke(args[:logstash_type], args[:path])
  end

  desc "Parse STDIN and dump the result to STDOUT"
  task :debug, :logstash_type do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/debug.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/debug.conf", args)
    sh "TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -v -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/debug.conf'"
  end

  task :raw, :logstash_type do |t, args|
    process_erb("#{ENV['APP_APP_DIR']}/srv/logstash/config/raw.conf.erb", "#{ENV['APP_APP_DIR']}/srv/logstash/config/raw.conf", args)
    sh "TMP=#{ENV['APP_TMP_DIR']} /usr/bin/java -jar '#{ENV['APP_VENDOR_DIR']}/logstash.jar' agent -w #{$LOGSTASH_WORKERS} -f '#{ENV['APP_APP_DIR']}/srv/logstash/config/raw.conf'"
  end

  namespace :test do
    desc "Run all available integration tests"
    task :all_types do
      puts "==> Running logstash tests"

      Rake::Task["logstash:test:common:trimming"].invoke
      Rake::Task["logstash:test:type:json"].invoke
      Rake::Task["logstash:test:type:nginx_combined"].invoke
      Rake::Task["logstash:test:type:iis_default"].invoke
      Rake::Task["logstash:test:type:iis_tradingapi"].invoke
      Rake::Task["logstash:test:type:stackato_apptail"].invoke
      Rake::Task["logstash:test:type:stackato_event"].invoke
      Rake::Task["logstash:test:type:stackato_systail"].invoke
      Rake::Task["logstash:test:type:ci_appmetrics"].invoke
      Rake::Task["logstash:test:type:ci_latency_monitor_bot"].invoke
      Rake::Task["logstash:test:type:ci_log4net"].invoke
      Rake::Task["logstash:test:type:ci_ip_diagnostics"].invoke
      Rake::Task["logstash:test:type:ci_ip_diagnostics_kv"].invoke
      Rake::Task["logstash:test:type:ci_activemq_stats_logger"].invoke

      puts "==> All tests completed successfully :)"
    end

    namespace :common do
        task :trimming do
            sh "#{ENV['APP_APP_DIR']}/srv/logstash/test/common-trimming.sh #{$LOGSTASH_MESSAGE_MAXSIZE}"
        end
    end

    namespace :type do
      desc "Run json tests"
      task :json => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("json", :redis, 2)
      end

      desc "Run nginx_combined tests"
      task :nginx_combined => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("nginx_combined", :redis, 5)
      end

      desc "Run iis_default tests"
      task :iis_default => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("iis_default", :redis, 48)
      end

      desc "Run iis_tradingapi tests"
      task :iis_tradingapi => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("iis_tradingapi", :redis, 48)
      end

      desc "Run stackato_apptail tests"
      task :stackato_apptail => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("stackato_apptail", :redis, 4)
      end

      desc "Run stackato_event tests"
      task :stackato_event => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("stackato_event", :redis, 11)
      end

      desc "Run stackato_systail tests"
      task :stackato_systail => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("stackato_systail", :redis, 18)
      end

      desc "Run ci_appmetrics tests"
      task :ci_appmetrics => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("ci_appmetrics", :redis, 47)
      end

      desc "Run ci_latency_monitor_bot tests"
      task :ci_latency_monitor_bot do
        system "cd #{ENV['APP_APP_DIR']} && rake elasticsearch:delete_all_data_by_query"
        run_integration_test("ci_latency_monitor_bot", :lumberjack, 6, {:type => "json"})
      end

      desc "Run ci_log4net tests"
      task :ci_log4net => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("ci_log4net", :lumberjack, 5)
      end

      desc "Run ci_ip_diagnostics tests"
      task :ci_ip_diagnostics => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("ci_ip_diagnostics", :redis, 32)
      end

      desc "Run ci_ip_diagnostics_kv tests"
      task :ci_ip_diagnostics_kv => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("ci_ip_diagnostics_kv", :redis, 31)
      end

      desc "Run ci_activemq_stats_logger tests"
      task :ci_activemq_stats_logger => "elasticsearch:delete_all_data_by_query" do
        run_integration_test("ci_activemq_stats_logger", :lumberjack, 4)
      end

    end
  end
end

class ElasticsearchNotRunning < RuntimeError; end

def run_integration_test(test, method, expected_messages, options={})
  options[:type] ||= test

  pid = false

  if File.exists?("/etc/init/app-elasticsearch-1.conf")
    if /start\/running/ !~ `service app-elasticsearch status` 
      pid = fork do
        exec "rake elasticsearch:run > /dev/null 2>&1"
      end
    end
  end

  # dependencies would have marked these to not run again, so reset that
  Rake::Task['elasticsearch:delete_all_data_by_query'].reenable

  begin
    if pid
      puts "==> Waiting for elasticsearch to be ready ..."
      sh "while ! nc -vz #{ENV['APP_CONFIG_ES_IPADDRESS']} 9200 2>/dev/null ; do sleep 2 ; done"
    end

    puts "==> Importing test data ..."
    case method
      when :redis
        Rake::Task['logstash:load_file_to_redis'].reenable
        Rake::Task['logstash:load_file_to_redis'].invoke type, "#{ENV['APP_APP_DIR']}/srv/logstash/test/#{options[:type]}.log"
      when :lumberjack
        puts "---> Ensuring lumberjack and lumberjack keys are installed"

        unless File.exists? "#{ENV['APP_VENDOR_DIR']}/lumberjack"
          Rake::Task['lumberjack:provision'].invoke
        end

        unless File.exists? "#{ENV['APP_DATA_DIR']}/lumberjack.key"
          Rake::Task['lumberjack:generate_keys'].invoke

          puts "Restarting app-lumberjack_redis to ensure its running the latest config file..."
          sh "sudo service app-lumberjack_redis restart"
        end

        puts "---> Shipping the test log file via lumberjack shipper -> lumberjack endpoint -> redis"
        Rake::Task['lumberjack:ship_to_lumberjack_endpoint'].reenable
        Rake::Task['lumberjack:ship_to_lumberjack_endpoint'].invoke "#{ENV['APP_APP_DIR']}/srv/logstash/test/#{test}.log", options[:type]
      else
        raise "Unrecognised importer: #{method}"
    end

    wait_for_message_count expected_messages

    assert_no_grokparsefailure

    puts "==> Ensuring elasticsearch has finished indexing our data ..."
    sh "curl -sXPOST 'http://#{ENV['APP_CONFIG_ES_IPADDRESS']}:9200/_all/_flush' > /dev/null"
  
    puts "==> Running our test queries ..."
    sh "ruby #{ENV['APP_APP_DIR']}/srv/logstash/test/#{test}.rb"
  ensure
    if pid
      Process.kill("TERM", File.read("#{ENV['APP_RUN_DIR']}/elasticsearch.pid").to_i)
      Process.waitpid(pid)
    end
  end
end
